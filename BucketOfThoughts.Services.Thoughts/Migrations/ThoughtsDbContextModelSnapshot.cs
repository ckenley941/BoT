// <auto-generated />
using System;
using BucketOfThoughts.Services.Thoughts.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BucketOfThoughts.Services.Thoughts.Migrations
{
    [DbContext(typeof(ThoughtsDbContext))]
    partial class ThoughtsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.RelatedThought", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<int>("ThoughtId1")
                        .HasColumnType("int");

                    b.Property<int>("ThoughtId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtId1");

                    b.HasIndex("ThoughtId2");

                    b.ToTable("RelatedThought", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.Thought", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(3);

                    b.Property<int>("ThoughtCategoryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ThoughtGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtCategoryId");

                    b.ToTable("Thought", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(3);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("ThoughtModuleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtModuleId");

                    b.ToTable("ThoughtCategory", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("ThoughtId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThoughtId");

                    b.ToTable("ThoughtDetail", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ThoughtModule", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtWebsiteLink", b =>
                {
                    b.Property<int>("ThoughtId")
                        .HasColumnType("int");

                    b.Property<int>("WebsiteLinkId")
                        .HasColumnType("int");

                    b.HasKey("ThoughtId", "WebsiteLinkId");

                    b.HasIndex("WebsiteLinkId");

                    b.ToTable("ThoughtWebsiteLink", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.WebsiteLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(2)
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTimeOffset?>("ModifiedDateTime")
                        .HasColumnType("datetimeoffset")
                        .HasColumnOrder(3);

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WebsiteLink", (string)null);
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.RelatedThought", b =>
                {
                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.Thought", "ThoughtId1Navigation")
                        .WithMany("RelatedThoughtThoughtId1Navigations")
                        .HasForeignKey("ThoughtId1")
                        .IsRequired()
                        .HasConstraintName("FK_RelatedThought_Thought1");

                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.Thought", "ThoughtId2Navigation")
                        .WithMany("RelatedThoughtThoughtId2Navigations")
                        .HasForeignKey("ThoughtId2")
                        .IsRequired()
                        .HasConstraintName("FK_RelatedThought_Thought2");

                    b.Navigation("ThoughtId1Navigation");

                    b.Navigation("ThoughtId2Navigation");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.Thought", b =>
                {
                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.ThoughtCategory", "ThoughtCategory")
                        .WithMany("Thoughts")
                        .HasForeignKey("ThoughtCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Thought_ThoughtCategory");

                    b.Navigation("ThoughtCategory");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtCategory", b =>
                {
                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.ThoughtModule", "ThoughtModule")
                        .WithMany("ThoughtCategories")
                        .HasForeignKey("ThoughtModuleId")
                        .IsRequired()
                        .HasConstraintName("FK_ThoughtCategory_ThoughtModule");

                    b.Navigation("ThoughtModule");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtDetail", b =>
                {
                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.Thought", "Thought")
                        .WithMany("ThoughtDetails")
                        .HasForeignKey("ThoughtId")
                        .IsRequired()
                        .HasConstraintName("FK_ThoughtDetail_Thought");

                    b.Navigation("Thought");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtWebsiteLink", b =>
                {
                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.Thought", "Thought")
                        .WithMany("ThoughtWebsiteLinks")
                        .HasForeignKey("ThoughtId")
                        .IsRequired()
                        .HasConstraintName("FK_ThoughtWebsiteLink_Thought");

                    b.HasOne("BucketOfThoughts.Services.Thoughts.Data.WebsiteLink", "WebsiteLink")
                        .WithMany("ThoughtWebsiteLinks")
                        .HasForeignKey("WebsiteLinkId")
                        .IsRequired()
                        .HasConstraintName("FK_ThoughtWebsiteLink_WebsiteLink");

                    b.Navigation("Thought");

                    b.Navigation("WebsiteLink");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.Thought", b =>
                {
                    b.Navigation("RelatedThoughtThoughtId1Navigations");

                    b.Navigation("RelatedThoughtThoughtId2Navigations");

                    b.Navigation("ThoughtDetails");

                    b.Navigation("ThoughtWebsiteLinks");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtCategory", b =>
                {
                    b.Navigation("Thoughts");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.ThoughtModule", b =>
                {
                    b.Navigation("ThoughtCategories");
                });

            modelBuilder.Entity("BucketOfThoughts.Services.Thoughts.Data.WebsiteLink", b =>
                {
                    b.Navigation("ThoughtWebsiteLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
